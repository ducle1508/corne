/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

/ {
    behaviors {
        lt_400: lt_400 {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_400";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        mt_400: mt_400 {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_400";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp F12                   &kp Q  &kp W  &kp F  &kp P       &kp D          &kp J            &kp L      &kp U      &kp Y    &mt_400 LEFT_ALT EQUAL         &mt_400 LEFT_CONTROL BACKSLASH
&kp TAB                   &kp A  &kp R  &kp S  &kp T       &kp G          &kp H            &kp N      &kp E      &kp I    &kp O                          &kp ENTER
&mt LEFT_SHIFT BACKSPACE  &kp Z  &kp X  &kp C  &kp V       &kp B          &kp K            &kp M      &kp COMMA  &kp DOT  &mt_400 LEFT_GUI SINGLE_QUOTE  &mt LEFT_SHIFT SLASH
                                        &none  &lt 3 HOME  &lt 1 SPACE    &lt 1 BACKSPACE  &lt 3 END  &none
            >;
        };

        nav {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE                 &kp ESCAPE  &kp W  &kp F  &kp CAPSLOCK  &kp LG(P)      &kp L            &kp LC(LS(TAB))  &kp UP_ARROW    &kp LC(TAB)      &kp LEFT_ALT   &kp LEFT_CONTROL
&kp TAB                   &kp A       &kp R  &kp S  &kp LEFT_GUI  &kp LG(T)      &kp LS(ENTER)    &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LC(ENTER)  &kp ENTER
&mt LEFT_SHIFT BACKSPACE  &kp Z       &kp X  &kp C  &kp LG(V)     &kp LG(B)      &kp K            &kp PAGE_UP      &kp SPACE       &kp PAGE_DOWN    &kp LEFT_GUI   &mt_400 LEFT_SHIFT SLASH
                                             &none  &kp HOME      &lt 2 SPACE    &lt 2 BACKSPACE  &kp END          &none
            >;
        };

        BASE_UPPER {
            bindings = <
&kp LS(GRAVE)  &kp LS(Q)  &kp LS(W)  &kp LS(F)  &kp LS(P)     &kp LS(D)    &kp LS(J)  &kp LS(L)    &kp LS(U)      &kp LS(Y)    &mt_400 LS(LEFT_ALT) LS(EQUAL)         &mt_400 LS(LEFT_CONTROL) LS(BACKSLASH)
&kp LS(TAB)    &kp LS(A)  &kp LS(R)  &kp LS(S)  &kp LS(T)     &kp LS(G)    &kp LS(H)  &kp LS(N)    &kp LS(E)      &kp LS(I)    &kp LS(O)                              &kp LS(ENTER)
&kp BACKSPACE  &kp LS(Z)  &kp LS(X)  &kp LS(C)  &kp LS(V)     &kp LS(B)    &kp LS(K)  &kp LS(M)    &kp LS(COMMA)  &kp LS(DOT)  &mt_400 LS(LEFT_GUI) LS(SINGLE_QUOTE)  &kp LS(SLASH)
                                     &none      &kp LS(HOME)  &none        &none      &kp LS(END)  &none
            >;
        };

        num_char_med {
            bindings = <
&none          &none             &kp LEFT_PARENTHESIS  &kp MINUS          &kp RIGHT_PARENTHESIS  &none        &none          &kp LEFT_BRACKET  &kp UNDERSCORE  &kp RIGHT_BRACKET  &kp LEFT_ALT                    &kp LEFT_CONTROL
&kp ENTER      &kp N1            &kp N2                &kp N3             &kp N4                 &kp N5       &kp N6         &kp N7            &kp N8          &kp N9             &kp N0                          &kp COLON
&kp BACKSPACE  &kp C_PLAY_PAUSE  &kp C_PREVIOUS        &kp C_VOLUME_DOWN  &kp C_VOLUME_UP        &none        &none          &none             &kp COMMA       &kp DOT            &mt_400 LEFT_GUI DOUBLE_QUOTES  &mt_400 LEFT_SHIFT SLASH
                                                       &mo 5              &mo 4                  &kp SPACE    &kp BACKSPACE  &mo 4             &none
            >;
        };

        num_char_med_upper {
            bindings = <
&none          &none            &none        &none      &none       &none          &none      &none          &none          &none             &kp LEFT_ALT                    &kp LEFT_CONTROL
&none          &kp EXCLAMATION  &kp AT_SIGN  &kp POUND  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp ASTERISK   &kp LEFT_BRACE    &kp RIGHT_BRACE                 &kp SEMICOLON
&kp BACKSPACE  &none            &none        &none      &none       &none          &none      &none          &kp LESS_THAN  &kp GREATER_THAN  &mt_400 LEFT_GUI DOUBLE_QUOTES  &kp LEFT_SHIFT
                                             &none      &none       &none          &none      &none          &none
            >;
        };

        bt_fn {
            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &none  &none  &none  &none  &none  &none
&kp F7      &kp F8        &kp F9        &kp F10       &kp F11       &kp F12         &none  &none  &none  &none  &none  &none
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none  &none  &none  &none  &none  &none
                                        &none         &none         &none           &none  &none  &none
            >;
        };
    };
};
